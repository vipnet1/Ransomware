----- TIMUR'S PART -----

At the beginning, I wanted to generate private, public keys on server. Then via public key encript all files in victim's computer,
and then after he pays with bitcoin send him private key.

The problem that some files too large for asymetric decription, and it's too slow.

So after seeking the internet for 1-2 days found great article about ransomware encryption techniques - time to rewrite the code again
as I decided to implement them. Yey:
https://medium.com/@tarcisioma/ransomware-encryption-techniques-696531d07bb9

In general - server and client generate rsa keys. public key of server is hard coded in malware. for each file we generate
symmetric keys(AES) and after encryption encrypt the symmetric keys with the client public key.
So files encrypted with symmetric key, which is encrypted with client public key. To dencrypt symmetric key - we need client private key,
which is encrypted with server public key. To encrypt certain file:
1) Server decrypts client private key after payment.
2) Client decrypts symmetric keys for all files and recovers them.

Now why do I need to generate AES key for each encrypted file? Can't I just create one for all the files?
I think it's so malwares can proof that their 'decription services' really work on one-two files - maybe will implement it later now I will use
on symmetric key for all files.

Nevermind I understood so if we get one key we can't decrypt all files. To be able to keep encrypting while malware already spoofed.

So the idea is to implement the above - if for example file name is mountaint.png it will be mountain.png.ENCRYPTED_SYMMETRIC_KEY.timurs_ransom
after retrieving private client key i can encrypt all symmetric keys and restore files.
And this way I dont have to save key data about all clients in db or something - thats genious!

By the way this eliminates the option to allow decryption off test files but I can always generate another set of keys on server for this purpose))

Okay now I have an idea of what I'm going to implement. ready set go.

Yep there's a dumb problem - I can't encrypt RSA private key with public key as it's too big. yey. I will do it in chunks.
for example my private key file is 886 characters long, so I will encrypt in chunks of 200, and server will do the same with decryption.
Don't see another way.

Okay it's cancer. It's not recommended to encrypt in chunks assymetricly it will be too slow and rensomware will encrypt very slow.
I have another idea. I will use Fernet(first one i found on web xd) symmetric key:
I cant encrypt client private key with server public key, so I will encrypt client private key with fernet symmetric key, and then fernet symmetric
key with the server public key. So later after payment client requets server, server decrypts Fernet key and then we use Fernet symmetric key
to decrypt client private key and later the files.

Good luck for me to create .png of this but for now its the flow.

YES! IT WORKS!

Just one point as the key sometimes containis slashes, and in windows it causes problems so problematic to put in filename, so i decided
that both the encrypted aes key and data in the file:

file example after malware corrupted it:
```
-----KEY BEGIN-----
B6p/J3efkKjBe701zd0u+Ol4NK+YAuQH9EaGMCIUrPqw7+xsNX02luociS8rnc0xTP+8CWTkqWlkUzW5mr9lHOG6va04uVniXvWFITveuoSUDCY79sg4n9oPXM6vgOFkpKQxcGTxOt5Qa5L+jgbu97i1XZ8PVkSWzuzodLeb/6Y=
-----KEY END-----

TIHbv4E80SgIViiiegAmr7idHLcvekAdugW7ASkmUzg=
```

Okay for now I made folder of files, all files there will be encrypted(I can run on whole pc if needed its easy just currently on my main computer,
as python in windows 7 is trash+my computer trash)

Okay great so currently when you run it all files in folder 'RANSOM' get encrypted and second after, after runnig decription function get
restored.
Now I want that the server will decrypt fernet key ONLY IF PAYMENT WHERE MADE and not always. The plan:
Im going to add using library(that i hope exists). - Client(ransomware) will send the transactionid/his wallet i dont know need to investigate
and server checks if payment were made from this address to mine wallet, if so decrypt the private key, and write it in variable that the key
for this payment were sent and to not accept it anymore.
Yep lets start.

Okey so I opened 2 electrum wallets, one for ransomware client to pay from one to receive transactions. bought 6 milli-bitcons
from bits of gold(those assholes minimal papyment is 500 shekels).

And I sent 0.1 milli-bitcoin to the ransomware wallet, and the electrum fees are 0.5 milli-bitcoin. Yey. Life trash.
Anyway now have the ability to continue.

There are some websites that allow to monitor transactions - as I see common one for python developers is https://www.blockchain.com/btc/address/BITCOIN_ADDRESS
But i transferred bitcoins about a hour ago and still don't see the data about it. On the other hand there's https://blockstream.info/address/BITCOIN_ADDRESS
But seems more complex to use, but it has api.

Okay so the first site is showing the address data after searching the transactionId.

Okay found better website:
https://blockchain.info/rawtx/4119104d3bf68af16c76a2704588ed52adb516a43c65390fa2e416cabf9c08ed

It's the transaction I made from one wallet to another(it doesnt work with addresses for me for some reasons so im
with trasnactions id).
So we see in the link a lot of fees(yep, money is the teacher) and a block where we see value 10000 and as addr our address.
So 10000 stands for 0.1 milli-bitcoin. So we have to iterate all the block, and find the block where the address is ours, and then
if it's more or equal than the amount we want victims to pay(lets suppose it will actually be 0.1 milli-bitcoin) then we decrypt
fernet key ONCE.

By the way all this stuff in the server just writing one description file for both projects.
Yea actually pretty cool endpoint. Useful data.

So we want to search in the array 'out' for money transfer to our address, and store data in variable(better db but don't have much time left...)

Okay so everything working!!!
We send to server transaction id, it validates if during the transaction if one of the payments was to the address we want(to my wallet)
and if so decrypts the key. else sends message that process failed. If some exception occurs of course if doesn't decrypt the key
on server side.

Would be cool to add features like after 3 server request attempts no more decryption available, decryption of test files(for that need to generate
another 4 rsa keys and fernet...)

But don't have time.

Now what's left? its possible to run the malware not on single file but the whole computer easily, but as im running not on vm cause python
on vm windows 7 sucks and I have pretty bad computer, and want to CONTINUE USING my pc after the project, I will just run on the files
in the folder 'RANSOM'.

Now what about informing the user about the ransomware? allowing him to request decryption and so on?
I want to create explanation file on desktop so user views it. If malware run on whole computer i can just exclude the name
but currently I dont have such a problem of accidently encrypting the explanation file.

So i create explanation file on desktop(better just copy it from current folder to desktop...)
I want also to allow user to trigger attempt to send fernet key for decryption for the server. So I will make another fastapi server
but it will be on the malware itself...

Okey to the work.

Nah nevermind about the server. For the 'users experience' lets say that he should create a file named RANSOMWARE_TRANSACTION_ID.txt
and put here the transaction id. If we find this file we try to get encrypted key from server. If success we decrypt the files.

Nevermind. So final code - I copy the explanation file to desktop, and request for decryption done via:
http://127.0.0.1:8074/attempt_decrypt/YOUR_TRANSACTION_ID

Okay I fixed the part with copying the information file to desktop.

Thats all with my part

Summary what Timur Done(in both repo's):
- Setting base files - README, gitignore, .vscode, requirements.
- Whole cryptographic structure, logic, research and implementation, key generation logic. Encryption/Decryption.
- RSA, AES, FERNET, BASE64 - planning and implementing to make the everything work, dealing with strings/binary.
- Bitcoin wallets(opened 2, had no experiene before), transaction from one to another, find place to monitor data.
- Whole Ransomware Server code.
- Fastapi implementation.
- Cryptography, Bitcoin transactions monitor project structure and implementation.
- Explanation file for the victim.
- Basically all ransomware pure logic.
- Architecture explanation files - ransomware_*_architecture.png

----- END TIMUR'S PART -----



----- BEN'S PART -----

so firstly I tryed to install the projext moduls from requirements.txt
at the "RANSOMWARE" and "RANSOMWARESERVER" projects. I notices that the project
imported Crypto module but it doesnt worked for me so I changed it to Cryptodome. and the version of pyvryptodomex is 3.15.0

after that I added a function on the server to return the current public key at /getPublicKey path.
and I added a functions on the client to return and keep the public key if the ./keys/public.pem file is empty or non-exists.

I wanted to host the server online but I have some chalenges in the begining like at what.....


I added functions for keeping the encrypted client private key, and the encrypted fernet key. so is the client process will be killed somehow, after we will run the client again
the needed keys to decrypt the files will remain:
in rsa_chiper i create a function that read key from a file using encode to utf-8 and base 64 decode to get the binary key
and the oppose operation - to  base 64 encode the key, decode to utf-8 and write to a file

all worked only when the key files were empty or no-existant and we doesn't change the encrypted files endings so the program wont try to encrypt with undefiend encryptor(global rsa_cipher.py) object.
after some testings, I've noticed that the program generates firstly a random key, that will generate only one public key and private key. after that make an encryptor with that key.
if I will save the rsa_key the program generated, the user could easily get the private key with (private_key = key.export_key('PEM')) so I of course didn't choose that option. 
I thought maybe I could keep the encryptor object in file. but after some research I found that I can use my client_private_key to create the encryptor object. so i keeped it without exposing the keys.
so for now in ./keys/ the program will create the following files:
-the ransomware public key(.pem)
-the ransomware encrypted private key -(with fernet key) the key is encoded with utf-8 format and in base 64
-The mutual fernet key encrypted - (with server public key) the key is encoded with utf-8 format and in base 64
-The server public key (.pem) 

I wanted to set a global if_encrypted_files, that wont create new keys and won't encrypt the files again so we can decrypt them. but I noticed that my partner already done that with the endings.


after some testing i commited the changes on git for the malware project and the server project.

I added a watchdog for the two projects.
I reason behind that is that firstly we want to encryopt and decrypt all the files and that the processes will work, secoundly we want to maintain the uvicorn fastAPI web servers.
so I use two functions for this:
the first is set_watchdog: give the selected_pid for the watchdog and set the watchdog
the watchdog(selected_pid): every 5s we check if the main process is working if not we create a new process on main function and monitoring it

I understood that I maid a mistake on the timing of the saving of the client keys.
I saved them after encrypting all the files, but if the process will terminate terminate in the encryption process the keys wont match and the decryption wont work
so I fixed the issue by saving the keys on the creation. so if the process will stop. it will be fine.
after that i commited the server and the client under "watchdog" (branch ben-start)

I added a persistance feature in the two projects, with python's model winreg we set an autoruns for both client and server. so if the user will restart the computer the serverand the client
will start over and continue their work. it probably will be good for decryption. because the encryption is very fast especially with a small RANSOM derictory.
I created on run the two start.bat files. with the current working directory of the projects.
And for the ransomware I set a timeout of 15 sec so it will run after the server.
I created it on flight so that the user want be that alerted by the projects.
This part for me was tricky because I need to restart my computer to verify the addition.

I updated my branch ben-start, I noticed that in persistance I called the two server and client the same so I changed that
I have noticed that in the server in requirements the pycryptodomex was not in a good version so i fixed that
I have noticed that in the client the directory keys is non existant at first and I fix that with a funtion called create_dir(path)








